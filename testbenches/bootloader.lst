
;
; Created on Sun Apr  7 19:17:35 2024 with ECE 449 assembler v1.12 beta 1 (16 bit).
;
;Header Section
RADIX 10
DEPTH 1024
WIDTH 16
DEFAULT 0
;
; Data Section
; Specifies data to be stored in different addresses
; e.g., DATA 0:A, 1:0
;
RADIX 16
DATA 
0000 => "1000000000000100", -- 0000 - 8004                     brr           ResetExecute
0001 => "1000000000100101", -- 0001 - 8025                     brr           ResetLoad
0002 => "1000000000000001", -- 0002 - 8001                     brr           Interrupt
0003 => "1000000000000000", -- 0003 - 8000 WaitForever:        brr           WaitForever
0004 => "0010010100001000", -- 0004 - 2508 ResetExecute:       loadimm.upper BootVector.hi
0005 => "0010010000000000", -- 0005 - 2400                     loadimm.lower BootVector.lo
0006 => "0010000111111000", -- 0006 - 21F8                     load          r7,r7
0007 => "0010010000000000", -- 0007 - 2400                     loadimm.lower 0x00
0008 => "0010011010111000", -- 0008 - 26B8                     mov           r2,r7
0009 => "0010010100100101", -- 0009 - 2525                     loadimm.upper 0x25
0010 => "0010010000000000", -- 000A - 2400                     loadimm.lower 0x00
0011 => "0000010010010111", -- 000B - 0497                     sub           r2,r2,r7
0012 => "0000111010000000", -- 000C - 0E80                     test          r2
0013 => "1000010000000010", -- 000D - 8402                     brr.z         ResetExecute_1
0014 => "1000000111110101", -- 000E - 81F5                     brr           WaitForever
0015 => "0010010100001000", -- 000F - 2508                     loadimm.upper BootVector_1.hi
0016 => "0010010000000010", -- 0010 - 2402                     loadimm.lower BootVector_1.lo
0017 => "0010000111111000", -- 0011 - 21F8                     load          r7,r7
0018 => "0010010000000000", -- 0012 - 2400                     loadimm.lower 0x00
0019 => "0010011010111000", -- 0013 - 26B8                     mov           r2,r7
0020 => "0010010100100100", -- 0014 - 2524                     loadimm.upper 0x24
0021 => "0010010000000000", -- 0015 - 2400                     loadimm.lower 0x00
0022 => "0000010010010111", -- 0016 - 0497                     sub           r2,r2,r7
0023 => "0000111010000000", -- 0017 - 0E80                     test          r2
0024 => "1000010000000010", -- 0018 - 8402                     brr.z         ResetExecute_2
0025 => "1000000111101010", -- 0019 - 81EA                     brr           WaitForever
0026 => "0010010100001000", -- 001A - 2508                     loadimm.upper BootVector_2.hi
0027 => "0010010000000100", -- 001B - 2404                     loadimm.lower BootVector_2.lo
0028 => "0010000010111000", -- 001C - 20B8                     load          r2,r7
0029 => "0010010110000111", -- 001D - 2587                     loadimm.upper 0x87
0030 => "0010010011000000", -- 001E - 24C0                     loadimm.lower 0xc0
0031 => "0000010010010111", -- 001F - 0497                     sub           r2,r2,r7
0032 => "0000111010000000", -- 0020 - 0E80                     test          r2
0033 => "1000010000000010", -- 0021 - 8402                     brr.z         ResetExecute_3
0034 => "1000000111100001", -- 0022 - 81E1                     brr           WaitForever
0035 => "0010010100001000", -- 0023 - 2508                     loadimm.upper BootVector.hi
0036 => "0010010000000000", -- 0024 - 2400                     loadimm.lower BootVector.lo
0037 => "1000011111000000", -- 0025 - 87C0                     br            r7,0
0038 => "0010010100000000", -- 0026 - 2500 ResetLoad:          loadimm.upper 0x00
0039 => "0010010010000000", -- 0027 - 2480                     loadimm.lower 0x80
0040 => "0010011110111000", -- 0028 - 27B8                     mov           r6,r7
0041 => "0100001010000000", -- 0029 - 4280 WaitFor_AA:         in            r2
0042 => "0000100010010110", -- 002A - 0896                     nand          r2,r2,r6
0043 => "0000100010010010", -- 002B - 0892                     nand          r2,r2,r2
0044 => "0000111010000000", -- 002C - 0E80                     test          r2
0045 => "1000010111111100", -- 002D - 85FC                     brr.z         WaitFor_AA
0046 => "0010010111111111", -- 002E - 25FF                     loadimm.upper 0xFF
0047 => "0010010000000000", -- 002F - 2400                     loadimm.lower 0x00
0048 => "0100001010000000", -- 0030 - 4280                     in            r2
0049 => "0000100010010111", -- 0031 - 0897                     nand          r2,r2,r7
0050 => "0000100010010010", -- 0032 - 0892                     nand          r2,r2,r2
0051 => "0010010110101010", -- 0033 - 25AA                     LOADIMM.UPPER 0xAA
0052 => "0000010010010111", -- 0034 - 0497                     sub           r2,r2,r7
0053 => "0000111010000000", -- 0035 - 0E80                     test          r2
0054 => "1000010000000010", -- 0036 - 8402                     brr.z         Got_AA
0055 => "1000000111110010", -- 0037 - 81F2                     brr           WaitFor_AA
0056 => "0010010000000001", -- 0038 - 2401 Got_AA:             loadimm.lower 0x01
0057 => "0100000111000000", -- 0039 - 41C0                     out           r7
0058 => "0100001010000000", -- 003A - 4280                     in            r2
0059 => "0000100010010110", -- 003B - 0896                     nand          r2,r2,r6
0060 => "0000100010010010", -- 003C - 0892                     nand          r2,r2,r2
0061 => "0000111010000000", -- 003D - 0E80                     test          r2
0062 => "1000010000000010", -- 003E - 8402                     brr.z         Done_AA
0063 => "1000000111111011", -- 003F - 81FB                     brr           WaitForEnd_AA
0064 => "0010010000000000", -- 0040 - 2400 Done_AA:            loadimm.lower 0x00
0065 => "0100000111000000", -- 0041 - 41C0                     out           r7
0066 => "0010010100001000", -- 0042 - 2508                     loadimm.upper RamStart.hi
0067 => "0010010000000000", -- 0043 - 2400                     loadimm.lower RamStart.lo
0068 => "0010011110111000", -- 0044 - 27B8                     mov           r6,r7
0069 => "0010010100000000", -- 0045 - 2500                     loadimm.upper 0x00
0070 => "0010010000000010", -- 0046 - 2402                     loadimm.lower 0x02
0071 => "0010001110111000", -- 0047 - 23B8                     store         r6,r7
0072 => "0010010100000000", -- 0048 - 2500                     loadimm.upper 0x00
0073 => "0010010010000000", -- 0049 - 2480                     loadimm.lower 0x80
0074 => "0010011110111000", -- 004A - 27B8                     mov           r6,r7
0075 => "0100001010000000", -- 004B - 4280 WaitFor_55:         in            r2
0076 => "0000100010010110", -- 004C - 0896                     nand          r2,r2,r6
0077 => "0000100010010010", -- 004D - 0892                     nand          r2,r2,r2
0078 => "0000111010000000", -- 004E - 0E80                     test          r2
0079 => "1000010111111100", -- 004F - 85FC                     brr.z         WaitFor_55
0080 => "0010010111111111", -- 0050 - 25FF                     loadimm.upper 0xFF
0081 => "0010010000000000", -- 0051 - 2400                     loadimm.lower 0x00
0082 => "0100001010000000", -- 0052 - 4280                     in            r2
0083 => "0000100010010111", -- 0053 - 0897                     nand          r2,r2,r7
0084 => "0000100010010010", -- 0054 - 0892                     nand          r2,r2,r2
0085 => "0010010101010101", -- 0055 - 2555                     LOADIMM.UPPER 0x55
0086 => "0000010010010111", -- 0056 - 0497                     sub           r2,r2,r7
0087 => "0000111010000000", -- 0057 - 0E80                     test          r2
0088 => "1000010000000010", -- 0058 - 8402                     brr.z         Got_55
0089 => "1000000111110010", -- 0059 - 81F2                     brr           WaitFor_55
0090 => "0010010000000001", -- 005A - 2401 Got_55:             loadimm.lower 0x01
0091 => "0100000111000000", -- 005B - 41C0                     out           r7
0092 => "0100001010000000", -- 005C - 4280                     in            r2
0093 => "0000100010010110", -- 005D - 0896                     nand          r2,r2,r6
0094 => "0000100010010010", -- 005E - 0892                     nand          r2,r2,r2
0095 => "0000111010000000", -- 005F - 0E80                     test          r2
0096 => "1000010000000010", -- 0060 - 8402                     brr.z         Done_55
0097 => "1000000111111011", -- 0061 - 81FB                     brr           WaitForEnd_55
0098 => "0010010000000000", -- 0062 - 2400 Done_55:            loadimm.lower 0x00
0099 => "0100000111000000", -- 0063 - 41C0                     out           r7
0100 => "0010010100000000", -- 0064 - 2500                     loadimm.upper 0x00
0101 => "0010010010000000", -- 0065 - 2480                     loadimm.lower 0x80
0102 => "0010011110111000", -- 0066 - 27B8                     mov           r6,r7
0103 => "0100001010000000", -- 0067 - 4280 WaitForSize:        in            r2
0104 => "0010011100010000", -- 0068 - 2710                     mov           r4,r2
0105 => "0000100010010110", -- 0069 - 0896                     nand          r2,r2,r6
0106 => "0000100010010010", -- 006A - 0892                     nand          r2,r2,r2
0107 => "0000111010000000", -- 006B - 0E80                     test          r2
0108 => "1000010111111011", -- 006C - 85FB                     brr.z         WaitForSize
0109 => "0000110100001000", -- 006D - 0D08                     shr           r4,8
0110 => "0010010000000001", -- 006E - 2401                     loadimm.lower 0x01
0111 => "0100000111000000", -- 006F - 41C0                     out           r7
0112 => "0100001010000000", -- 0070 - 4280                     in            r2
0113 => "0000100010010110", -- 0071 - 0896                     nand          r2,r2,r6
0114 => "0000100010010010", -- 0072 - 0892                     nand          r2,r2,r2
0115 => "0000111010000000", -- 0073 - 0E80                     test          r2
0116 => "1000010000000010", -- 0074 - 8402                     brr.z         DoneSize
0117 => "1000000111111011", -- 0075 - 81FB                     brr           WaitForSizeEnd
0118 => "0010010000000000", -- 0076 - 2400 DoneSize:           loadimm.lower 0x00
0119 => "0100000111000000", -- 0077 - 41C0                     out           r7
0120 => "0010010100000010", -- 0078 - 2502                     loadimm.upper 0x02
0121 => "0010010000000000", -- 0079 - 2400                     loadimm.lower 0x00
0122 => "0010011011111000", -- 007A - 26F8                     mov           r3,r7
0123 => "0010010111111111", -- 007B - 25FF GetProgram:         loadimm.upper LedDisplay.hi
0124 => "0010010011110010", -- 007C - 24F2                     loadimm.lower LedDisplay.lo
0125 => "0010001111100000", -- 007D - 23E0                     store         r7,r4
0126 => "0000111100000000", -- 007E - 0F00                     test          r4
0127 => "1000010110000100", -- 007F - 8584                     brr.z         WaitForever
0128 => "0100001010000000", -- 0080 - 4280                     in            r2
0129 => "0010011001010000", -- 0081 - 2650                     mov           r1,r2
0130 => "0000100010010110", -- 0082 - 0896                     nand          r2,r2,r6
0131 => "0000100010010010", -- 0083 - 0892                     nand          r2,r2,r2
0132 => "0000111010000000", -- 0084 - 0E80                     test          r2
0133 => "1000010111111011", -- 0085 - 85FB                     brr.z         WaitForHighByte
0134 => "0000110001001000", -- 0086 - 0C48                     shr           r1,8
0135 => "0000101001001000", -- 0087 - 0A48                     shl           r1,8
0136 => "0010010000000001", -- 0088 - 2401                     loadimm.lower 0x01
0137 => "0100000111000000", -- 0089 - 41C0                     out           r7
0138 => "0100001010000000", -- 008A - 4280                     in            r2
0139 => "0000100010010110", -- 008B - 0896                     nand          r2,r2,r6
0140 => "0000100010010010", -- 008C - 0892                     nand          r2,r2,r2
0141 => "0000111010000000", -- 008D - 0E80                     test          r2
0142 => "1000010000000010", -- 008E - 8402                     brr.z         DoneHighByte
0143 => "1000000111111011", -- 008F - 81FB                     brr           WaitForHighByteEnd
0144 => "0010010000000000", -- 0090 - 2400                     loadimm.lower 0x00
0145 => "0100000111000000", -- 0091 - 41C0                     out           r7
0146 => "0010011000001000", -- 0092 - 2608                     mov           r0,r1
0147 => "0100001010000000", -- 0093 - 4280                     in            r2
0148 => "0010011001010000", -- 0094 - 2650                     mov           r1,r2
0149 => "0000100010010110", -- 0095 - 0896                     nand          r2,r2,r6
0150 => "0000100010010010", -- 0096 - 0892                     nand          r2,r2,r2
0151 => "0000111010000000", -- 0097 - 0E80                     test          r2
0152 => "1000010111111011", -- 0098 - 85FB                     brr.z         WaitForLowByte
0153 => "0000110001001000", -- 0099 - 0C48                     shr           r1,8
0154 => "0010010000000001", -- 009A - 2401                     loadimm.lower 0x01
0155 => "0100000111000000", -- 009B - 41C0                     out           r7
0156 => "0100001010000000", -- 009C - 4280                     in            r2
0157 => "0000100010010110", -- 009D - 0896                     nand          r2,r2,r6
0158 => "0000100010010010", -- 009E - 0892                     nand          r2,r2,r2
0159 => "0000111010000000", -- 009F - 0E80                     test          r2
0160 => "1000010000000010", -- 00A0 - 8402                     brr.z         DoneLowByte
0161 => "1000000111111011", -- 00A1 - 81FB                     brr           WaitForLowByteEnd
0162 => "0100001010000000", -- 00A2 - 4280 DoneLowByte:        in            r2
0163 => "0010010000000000", -- 00A3 - 2400                     loadimm.lower 0x00
0164 => "0100000111000000", -- 00A4 - 41C0                     out           r7
0165 => "0000001001001000", -- 00A5 - 0248                     add           r1,r1,r0
0166 => "0000101010001001", -- 00A6 - 0A89                     shl           r2,9
0167 => "0000110010001111", -- 00A7 - 0C8F                     shr           r2,15
0168 => "0000111010000000", -- 00A8 - 0E80                     test          r2
0169 => "1000010000010101", -- 00A9 - 8415                     brr.z         GotInstruction
0170 => "0010011011001000", -- 00AA - 26C8                     mov           r3,r1
0171 => "0010010100000000", -- 00AB - 2500                     loadimm.upper StepSize.hi
0172 => "0010010000000010", -- 00AC - 2402                     loadimm.lower StepSize.lo
0173 => "0010011010111000", -- 00AD - 26B8                     mov           r2,r7
0174 => "0010010100001000", -- 00AE - 2508                     loadimm.upper BootVector.hi
0175 => "0010010000000000", -- 00AF - 2400                     loadimm.lower BootVector.lo
0176 => "0010011000111000", -- 00B0 - 2638                     mov           r0,r7
0177 => "0010011111011000", -- 00B1 - 27D8                     mov           r7,r3
0178 => "0000110111001000", -- 00B2 - 0DC8                     shr           r7,8
0179 => "0010010100100101", -- 00B3 - 2525                     loadimm.upper 0x25
0180 => "0010001000111000", -- 00B4 - 2238                     store         r0,r7
0181 => "0000001000000010", -- 00B5 - 0202                     add           r0,r0,r2
0182 => "0010011111011000", -- 00B6 - 27D8                     mov           r7,r3
0183 => "0010010100100100", -- 00B7 - 2524                     loadimm.upper 0x24
0184 => "0010001000111000", -- 00B8 - 2238                     store         r0,r7
0185 => "0000001000000010", -- 00B9 - 0202                     add           r0,r0,r2
0186 => "0010010110000111", -- 00BA - 2587                     loadimm.upper 0x87
0187 => "0010010011000000", -- 00BB - 24C0                     loadimm.lower 0xC0
0188 => "0010001000111000", -- 00BC - 2238                     store         r0,r7
0189 => "1000000000000101", -- 00BD - 8005                     brr           DecrementCount
0190 => "0010001011001000", -- 00BE - 22C8 GotInstruction:     store         r3,r1
0191 => "0010010100000000", -- 00BF - 2500                     loadimm.upper StepSize.hi
0192 => "0010010000000010", -- 00C0 - 2402                     loadimm.lower StepSize.lo
0193 => "0000001011011111", -- 00C1 - 02DF                     add           r3,r3,r7
0194 => "0010010100000000", -- 00C2 - 2500                     loadimm.upper 0x00
0195 => "0010010000000001", -- 00C3 - 2401                     loadimm.lower 0x01
0196 => "0000010100100111", -- 00C4 - 0527                     sub           r4,r4,r7
0197 => "1000000110110110", -- 00C5 - 81B6                     brr           GetProgram


-------------------------------------------------------
Symbol Table:
BootVector            2048 (0800)
BootVector_1          2050 (0802)
BootVector_2          2052 (0804)
DecrementCount         194 (00C2)
DoneHighByte           144 (0090)
DoneLowByte            162 (00A2)
DoneSize               118 (0076)
Done_55                 98 (0062)
Done_AA                 64 (0040)
GetProgram             123 (007B)
GotInstruction         190 (00BE)
Got_55                  90 (005A)
Got_AA                  56 (0038)
Interrupt                3 (0003)
LedDisplay           65522 (FFF2)
RamStart              2048 (0800)
ResetExecute             4 (0004)
ResetExecute_1          15 (000F)
ResetExecute_2          26 (001A)
ResetExecute_3          35 (0023)
ResetLoad               38 (0026)
StepSize                 2 (0002)
WaitForEnd_55           92 (005C)
WaitForEnd_AA           58 (003A)
WaitForHighByte        128 (0080)
WaitForHighByteEnd     138 (008A)
WaitForLowByte         147 (0093)
WaitForLowByteEnd      156 (009C)
WaitForSize            103 (0067)
WaitForSizeEnd         112 (0070)
WaitFor_55              75 (004B)
WaitFor_AA              41 (0029)
WaitForever              3 (0003)

